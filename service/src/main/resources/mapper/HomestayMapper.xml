<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.eghm.mapper.HomestayMapper">

    <select id="listPage" resultType="com.eghm.vo.business.homestay.HomestayResponse" parameterType="com.eghm.dto.business.homestay.HomestayQueryRequest">
        select
        t.id,
        t.title,
        r.merchant_name,
        t.`level`,
        t.cover_url,
        t.state,
        t.city_id,
        t.county_id,
        t.detail_address,
        t.phone,
        t.create_time,
        t.update_time
        from homestay t
        left join merchant r on t.merchant_id = r.id
        where t.deleted = false
        <if test="param.queryName != null and param.queryName != ''">
            and t.title like concat('%', #{param.queryName, typeHandler=com.eghm.handler.mysql.LikeTypeHandler}, '%')
        </if>
        <if test="param.state!= null">
            and t.state = #{param.state}
        </if>
        order by t.id desc
    </select>

    <select id="getByPage" resultType="com.eghm.vo.business.homestay.HomestayVO" parameterType="com.eghm.dto.business.homestay.HomestayQueryDTO">
        <choose>
            <when test="param.sortByDistance != null or param.sortByPrice != null">
                <include refid="getByPageSortSql" />
            </when>
            <otherwise>
                <include refid="getByPageSql"/>
            </otherwise>
        </choose>
    </select>

    <select id="getList" resultType="com.eghm.vo.business.homestay.HomestayVO">
        select
        t.id,
        t.title,
        t.`level`,
        t.state,
        t.cover_url as coverUrl
        from homestay t
        where t.id in
        <foreach collection="homestayIds" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <select id="getStorePage" parameterType="com.eghm.dto.business.base.BaseStoreQueryRequest" resultType="com.eghm.vo.business.base.BaseStoreResponse">
        select
        t.id as storeId,
        t.title as storeName,
        t.state,
        t.cover_url as coverUrl,
        'homestay' as productType,
        r.merchant_name
        from homestay t left join merchant r on t.merchant_id = r.id where t.deleted = false
        <if test="param.state != null">
            and t.state = #{param.state}
        </if>
        <if test="param.merchantId != null">
            and t.merchant_id = #{param.merchantId}
        </if>
        <if test="param.queryName != null and param.queryName != ''">
            and ( t.title like concat('%', #{param.queryName, typeHandler=com.eghm.handler.mysql.LikeTypeHandler}, '%') or
            r.merchant_name like concat('%', #{param.queryName, typeHandler=com.eghm.handler.mysql.LikeTypeHandler}, '%') )
        </if>
        order by t.id desc
    </select>

    <select id="getStoreList" resultType="com.eghm.vo.business.base.BaseStoreResponse">
        select
        t.id as storeId,
        t.title as storeName,
        t.state,
        t.cover_url as coverUrl,
        'homestay' as productType,
        r.merchant_name
        from homestay t left join merchant r on t.merchant_id = r.id
        where t.deleted = false and t.id in
        <foreach collection="homestayIds" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <!--无距离排序,不进行子查询-->
    <sql id="getByPageSql">
        select
        t.id,
        t.title,
        t.longitude,
        t.latitude,
        <if test="param.longitude != null and param.latitude != null">
            st_distance_sphere(point(t.longitude, t.latitude), point(#{param.longitude}, #{param.latitude})) as distance,
        </if>
        t.`level`,
        t.city_id,
        t.county_id,
        t.detail_address,
        t.cover_url,
        t.phone,
        t.tag as tagIds,
        r.minPrice
        from homestay t
        inner join (select homestay_id, count(1) as staynum, min(sale_price) as minPrice from homestay_room_config where config_date between #{param.startDate} and #{param.endDate}
        and stock > 0 and state = true group by homestay_id, homestay_room_id having count(homestay_room_id) = #{param.stayNum}) r on t.id = r.homestay_id
        where t.state = 1 and t.deleted = false
        <if test="param.queryName != null and param.queryName != ''">
            and t.title like concat('%', #{param.queryName, typeHandler=com.eghm.handler.mysql.LikeTypeHandler}, '%')
        </if>
        <if test="param.level != null">
            and t.`level` = #{param.level}
        </if>
        order by t.id desc
    </sql>

    <!--有距离排序-->
    <sql id="getByPageSortSql">
        select s.* from ( select
        t.id,
        t.title,
        t.longitude,
        t.latitude,
        st_distance_sphere(point(t.longitude, t.latitude), point(#{param.longitude}, #{param.latitude})) as distance,
        t.`level`,
        t.city_id as cityId,
        t.county_id as countyId,
        t.detail_address as detailAddress,
        t.cover_url as coverUrl,
        t.phone,
        t.tag as tagIds,
        r.minPrice
        from homestay t
        inner join (select homestay_id, count(1) as staynum, min(sale_price) as minPrice from homestay_room_config where config_date between #{param.startDate} and #{param.endDate}
        and stock > 0 and state = true group by homestay_id, homestay_room_id having count(homestay_room_id) = #{param.stayNum}) r on t.id = r.homestay_id
        where t.state = 1 and t.deleted = false
        <if test="param.queryName != null and param.queryName != ''">
            and t.title like concat('%', #{param.queryName, typeHandler=com.eghm.handler.mysql.LikeTypeHandler}, '%')
        </if>
        <if test="param.level != null">
            and t.`level` = #{param.level}
        </if>
        ) s
        <choose>
            <when test="param.sortByDistance == 1">
                order by s.distance, s.id desc
            </when>
            <when test="param.sortByDistance == 2">
                order by s.distance desc, s.id desc
            </when>
            <when test="param.sortByPrice == 1">
                order by s.minPrice, s.id desc
            </when>
            <otherwise>
                order by s.minPrice desc, s.id desc
            </otherwise>
        </choose>
    </sql>

    <update id="updateScore">
        update homestay set score = #{score} where id = #{id}
    </update>

</mapper>
