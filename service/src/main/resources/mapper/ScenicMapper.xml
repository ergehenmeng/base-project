<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.eghm.mapper.ScenicMapper">

    <select id="listPage" parameterType="com.eghm.dto.business.scenic.ScenicQueryRequest" resultType="com.eghm.vo.business.scenic.ScenicResponse">
        select
        id,
        scenic_name,
        open_time,
        cover_url,
        state,
        score,
        phone,
        `level`,
        min_price,
        max_price,
        create_time,
        update_time
        from scenic where deleted = false
        <if test="param.merchantId != null">
            and merchant_id = #{param.merchantId}
        </if>
        <if test="param.state != null">
            and state = #{param.state}
        </if>
        <if test="param.queryName != null and param.queryName != '' ">
            and scenic_name like concat('%', #{param.queryName, typeHandler=LikeTypeHandler}
            ,'%')
        </if>
        order by sort, id desc
    </select>

    <select id="getBaseList" resultType="com.eghm.vo.business.scenic.BaseScenicResponse">
        select
            id,
            scenic_name as title,
            state
        from scenic where deleted = false
        <if test="merchantId != null">
            and merchant_id = #{merchantId}
        </if>
        order by id desc
    </select>

    <select id="getByPage" resultType="com.eghm.vo.business.scenic.ScenicVO" parameterType="com.eghm.dto.business.scenic.ScenicQueryDTO">
        select
        id,
        scenic_name,
        cover_url,
        depict,
        <if test="param.longitude != null and param.latitude != null">
            st_distance_sphere(point(longitude, latitude), point(#{param.longitude}, #{param.latitude})) as distance,
        </if>
        longitude,
        latitude,
        `level`,
        min_price
        from scenic where deleted = false and state = 1
        <if test="param.queryName != null and param.queryName != '' ">
            and scenic_name like concat('%', #{param.queryName, typeHandler=LikeTypeHandler} ,'%')
        </if>
        order by sort
    </select>

    <select id="getList" resultType="com.eghm.vo.business.scenic.ScenicVO">
        select
        id,
        scenic_name,
        cover_url,
        depict,
        state,
        `level`,
        min_price
        from scenic where id in
        <foreach collection="scenicIds" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </select>

    <select id="getStorePage" parameterType="com.eghm.dto.business.base.BaseStoreQueryRequest" resultType="com.eghm.vo.business.base.BaseStoreResponse">
        select
        t.id as storeId,
        t.scenic_name as storeName,
        t.state,
        t.cover_url as coverUrl,
        'ticket' as productType,
        r.merchant_name
        from scenic t left join merchant r on t.merchant_id = r.id where t.deleted = false
        <if test="param.state != null">
            and t.state = #{param.state}
        </if>
        <if test="param.merchantId != null">
            and t.merchant_id = #{param.merchantId}
        </if>
        <if test="param.queryName != null and param.queryName != ''">
            and ( t.scenic_name like concat('%', #{param.queryName, typeHandler=LikeTypeHandler}, '%') or
            r.merchant_name like concat('%', #{param.queryName, typeHandler=LikeTypeHandler}, '%') )
        </if>
        order by t.id desc
    </select>

    <select id="getStoreList" resultType="com.eghm.vo.business.base.BaseStoreResponse">
        select
        t.id as storeId,
        t.scenic_name as storeName,
        t.state,
        t.cover_url as coverUrl,
        'ticket' as productType,
        r.merchant_name
        from scenic t left join merchant r on t.merchant_id = r.id
        where t.deleted = false and t.id in
        <foreach collection="scenicIds" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

</mapper>
