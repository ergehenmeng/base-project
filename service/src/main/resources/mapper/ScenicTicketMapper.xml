<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.eghm.mapper.ScenicTicketMapper">

    <select id="getByPage" parameterType="com.eghm.dto.business.scenic.ticket.ScenicTicketQueryRequest" resultType="com.eghm.vo.business.scenic.ticket.TicketResponse">
        select
        t.id,
        t.title,
        t.scenic_id,
        t.state,
        t.category,
        t.sale_num,
        t.sale_price,
        t.advance_day,
        t.start_date,
        t.end_date,
        t.stock,
        t.verification_type,
        t.real_buy,
        r.scenic_name,
        t.create_time,
        t.update_time
        from scenic_ticket t
        left join scenic r on t.scenic_id = r.id
        where t.deleted = false and t.merchant_id = #{param.merchantId}
        <if test="param.scenicId != null">
            and t.scenic_id = #{param.scenicId}
        </if>
        <if test="param.category != null">
            and t.category = #{param.category}
        </if>
        <if test="param.state != null">
            and t.state = #{param.state}
        </if>
        <if test="param.queryName != null and param.queryName != ''">
            and t.title like concat('%', #{param.queryName, typeHandler=LikeTypeHandler} ,'%')
        </if>
        order by t.id desc
    </select>

    <select id="getTicketList" resultType="com.eghm.vo.business.scenic.ticket.TicketBaseVO">
        select
        id,
        title,
        stock,
        line_price,
        sale_price
        from scenic_ticket where deleted = false and end_date &gt; now()
        and scenic_id = #{scenicId} order by id desc
    </select>

    <update id="updateStock" >
        update scenic_ticket set stock = stock + #{num}, sale_num = sale_num - #{num}, total_num = total_num - #{num}
        where id = #{id} and stock + #{num} &gt;= 0 and deleted = false
    </update>

    <update id="releaseStock">
        update scenic_ticket t, ticket_order r set t.stock = t.stock + #{num}
        where t.id = r.ticket_id and r.order_no = #{orderNo}
    </update>
    
    <select id="calcPrice" resultType="com.eghm.vo.business.scenic.ticket.TicketPriceVO">
        select IFNULL(min(sale_price),0) as minPrice, IFNULL(max(sale_price),0) as maxPrice from scenic_ticket where scenic_id = #{scenicId} and deleted = false
    </select>

    <update id="updateScore">
        update scenic_ticket t, scenic r set r.score = #{score} where t.scenic_id = r.id and t.id = #{id}
    </update>

    <select id="dayAppend" parameterType="com.eghm.dto.statistics.ProductRequest"  resultType="com.eghm.vo.business.statistics.ProductStatisticsVO">
        select
        create_date as createDate,
        sum(id) as appendNum
        from scenic_ticket
        where create_date &gt;= #{startDate} and create_date &lt;= #{endDate} and deleted = false
        <if test="merchantId != null">
            and merchant_id = #{merchantId}
        </if>
        group by create_date
    </select>

    <select id="getProductPage" parameterType="com.eghm.dto.business.base.BaseProductQueryRequest" resultType="com.eghm.vo.business.base.BaseProductResponse">
        select
        t.id,
        t.title,
        r.cover_url,
        'ticket' as productType,
        t.state,
        t.state = 2 as disabled,
        r.scenic_name as storeName
        from scenic_ticket t inner join scenic r on t.scenic_id = r.id
        where t.deleted = false
        <if test="param.queryName != null and param.queryName != ''">
            and (t.title like concat('%', #{param.queryName, typeHandler=LikeTypeHandler} ,'%')
            or r.scenic_name like concat('%', #{param.queryName, typeHandler=LikeTypeHandler} ,'%'))
        </if>
        <if test="param.state != null">
            and t.state = #{param.state}
        </if>
        <if test="param.merchantId != null">
            and t.merchant_id = #{param.merchantId}
        </if>
        order by t.id desc
    </select>
</mapper>
