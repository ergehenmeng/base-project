<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.eghm.mapper.ItemMapper">
    
    <select id="listPage" resultType="com.eghm.vo.business.item.ItemResponse" parameterType="com.eghm.dto.business.item.ItemQueryRequest">
        select
        t.id,
        t.store_id,
        t.title,
        r.title as storeName,
        t.sale_num,
        t.state,
        t.quota,
        t.delivery_type,
        t.max_price,
        t.min_price,
        t.create_time,
        t.update_time
        from item t left join item_store r on t.store_id = r.id
        where t.deleted = false
        <if test="param.expressId != null">
            and t.express_id = #{param.expressId}
        </if>
        <if test="param.queryName != null and param.queryName != ''">
            and (t.title like concat('%', #{param.queryName, typeHandler=com.eghm.handler.mysql.LikeTypeHandler} ,'%')  or r.title like concat('%', #{param.queryName, typeHandler=com.eghm.handler.mysql.LikeTypeHandler} ,'%'))
        </if>
        <if test="param.tagId != null and param.tagId != ''">
            and t.tag_id like concat(#{param.tagId} ,'%')
        </if>
        <if test="param.deliveryType != null ">
            and t.delivery_type = #{param.deliveryType}
        </if>
        <if test="param.state != null">
            and t.state = #{param.state}
        </if>
        <if test="param.storeId != null">
            and t.store_id = #{param.storeId}
        </if>
        <if test="param.merchantId != null">
            and t.merchant_id = #{param.merchantId}
        </if>
        <if test="param.minPrice != null">
            and t.min_price &gt;= #{param.minPrice}
        </if>
        <if test="param.maxPrice != null">
            and t.min_price &lt;= #{param.maxPrice}
        </if>
        order by t.id desc
    </select>
    
    <select id="getPriorityItem" resultType="com.eghm.vo.business.item.ItemVO">
        select
        id,
        title,
        cover_url,
        total_num as saleNum,
        min_price
        from item where deleted = false and state = 1
        <if test="shopId != null">
            and store_id = #{shopId}
        </if>
        order by min_price &gt; 0, sort, id limit #{limit}
    </select>
    
    <select id="getRecommendItem" resultType="com.eghm.vo.business.item.ItemVO">
        select
            id,
            title,
            cover_url,
            total_num as saleNum,
            min_price
        from item where deleted = false and state = 1
        order by min_price &gt; 0, recommend desc, id limit #{limit}
    </select>
    
    <select id="getByPage" parameterType="com.eghm.dto.business.item.ItemQueryDTO" resultType="com.eghm.vo.business.item.ItemVO">
        select
        t.id,
        t.title,
        t.cover_url,
        t.total_num as saleNum,
        t.min_price,
        r.title as storeName,
        t.store_id
        from item t inner join item_store r on t.store_id = r.id
        where t.deleted = false and t.state = 1 and t.min_price &gt; 0 and r.state = 1 and r.deleted = false
        <if test="param.queryName != null and param.queryName != ''">
            and t.title like concat('%', #{param.queryName, typeHandler=com.eghm.handler.mysql.LikeTypeHandler} ,'%')
        </if>
        <if test="param.tagId != null and param.tagId != ''">
            and t.tag_id like concat(#{param.tagId} ,'%')
        </if>
        <if test="param.deliveryType != null">
            and t.delivery_type = #{param.deliveryType}
        </if>
        <if test="param.sortBy != null">
            <choose>
                <when test="param.sortBy == 1">
                    order by t.min_price, t.recommend desc
                </when>
                <when test="param.sortBy == 2">
                    order by t.total_num desc, t.recommend desc
                </when>
                <when test="param.sortBy == 3">
                    order by t.score desc, t.recommend desc
                </when>
                <otherwise>
                    order by t.recommend desc
                </otherwise>
            </choose>
        </if>
    </select>
    
    <select id="getCouponScopeByPage" parameterType="com.eghm.dto.business.item.ItemCouponQueryDTO" resultType="com.eghm.vo.business.item.ItemVO">
        select
        t.id,
        t.title,
        t.cover_url,
        t.sale_num as saleNum,
        t.min_price
        from item t where t.deleted = false and t.state = 1 and t.min_price &gt; 0
        and t.store_id = #{param.storeId}
        <if test="param.useScope == 2">
            and exists (select 1 from coupon_scope r where t.id  = r.product_id and r.coupon_id = #{param.couponId} )
        </if>
        <if test="param.tagId != null and param.tagId != ''">
            t.tag_id like concat(#{param.tagId} ,'%')
        </if>
        <if test="param.useScope == 1">
            and t.store_id = #{param.storeId}
        </if>
        <if test="param.queryName != null and param.queryName != ''">
            and t.title like concat('%', #{param.queryName, typeHandler=com.eghm.handler.mysql.LikeTypeHandler} ,'%')
        </if>
        <if test="param.deliveryType != null">
            and t.delivery_type = #{param.deliveryType}
        </if>
        <if test="param.sortBy != null">
            <choose>
                <when test="param.sortBy == 1">
                    order by t.min_price, t.recommend desc
                </when>
                <when test="param.sortBy == 2">
                    order by t.total_num desc, t.recommend desc
                </when>
                <when test="param.sortBy == 3">
                    order by t.score desc, t.recommend desc
                </when>
                <otherwise>
                    order by t.recommend desc
                </otherwise>
            </choose>
        </if>
    </select>

    <update id="updateSaleNum">
        update item t, item_order r set t.sale_num = t.sale_num + r.num, t.total_num = t.total_num + r.num
        where t.id = r.item_id and r.order_no in
        <foreach collection="orderNoList" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </update>

    <select id="detailById" resultType="com.eghm.vo.business.item.ItemDetailVO">
        select
        t.id,
        t.store_id,
        r.logo_url,
        t.booking_id,
        t.limit_id,
        r.title as storeName,
        t.state,
        t.multi_spec,
        t.title,
        t.depict,
        t.cover_url,
        t.purchase_notes,
        t.quota,
        t.express_id,
        t.delivery_type,
        t.min_price,
        t.total_num,
        t.introduce,
        t.score,
        t.hot_sell
        from item t left join item_store r on t.store_id = r.id
        where t.deleted = false and t.id = #{id}
    </select>

    <update id="updateScore">
        update item set score = #{score} where id = #{id}
    </update>

    <select id="getList" resultType="com.eghm.vo.business.item.ItemVO">
        select
            t.id,
            t.title,
            t.cover_url,
            t.total_num as saleNum,
            t.min_price,
            t.state,
            r.title as storeName,
            t.store_id
        from item t inner join item_store r on t.store_id = r.id
        where t.id in
        <foreach collection="itemIds" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>
    </select>

    <select id="getProductPage" parameterType="com.eghm.dto.business.base.BaseProductQueryRequest" resultType="com.eghm.vo.business.base.BaseProductResponse">
        select
        t.id,
        t.title,
        t.cover_url,
        'item' as productType,
        t.state,
        r.title as storeName
        from item t inner join item_store r on t.store_id = r.id
        where t.deleted = false
        <if test="param.queryName != null and param.queryName != ''">
            and (t.title like concat('%', #{param.queryName, typeHandler=com.eghm.handler.mysql.LikeTypeHandler} ,'%')
                 or r.title like concat('%', #{param.queryName, typeHandler=com.eghm.handler.mysql.LikeTypeHandler} ,'%'))
        </if>
        <if test="param.state != null">
            and t.state = #{param.state}
        </if>
        <if test="param.merchantId != null">
            and t.merchant_id = #{param.merchantId}
        </if>
        order by t.id desc
    </select>

    <select id="dayAppend" parameterType="com.eghm.dto.statistics.ProductRequest"  resultType="com.eghm.vo.business.statistics.ProductStatisticsVO">
        select
            create_date as createDate,
            sum(id) as appendNum
        from item
        where create_date &gt;= #{startDate} and create_date &lt;= #{endDate} and deleted = false
        <if test="merchantId != null">
            and merchant_id = #{merchantId}
        </if>
        group by create_date
    </select>

    <select id="getActivityList" resultMap="activityResultMap">
        select
            t.id,
            t.title,
            t.cover_url,
            r.id as skuId,
            r.primary_spec_value,
            r.second_spec_value,
            r.sale_price
        from item t left join item_sku r on t.id = r.item_id
        where t.deleted = false and r.deleted = false and t.merchant_id = #{merchantId}
        <if test="activityId == null">
            and limit_id is null and t.booking_id is null
        </if>
        <if test="activityId != null">
            and (((booking_id is null and t.limit_id = #{activityId}) or (limit_id is null and t.booking_id = #{activityId})) or (limit_id is null and t.booking_id is null))
        </if>
    </select>

    <resultMap id="activityResultMap" type="com.eghm.vo.business.item.ActivityItemResponse">
        <id column="id" property="id" />
        <result column="title" property="title" />
        <result column="cover_url" property="coverUrl" />
        <collection property="skuList" ofType="com.eghm.vo.business.item.BaseSkuResponse">
            <id property="id" column="skuId"/>
            <result column="primary_spec_value" property="primarySpecValue" />
            <result column="second_spec_value" property="secondSpecValue" />
            <result column="sale_price" property="salePrice" />
        </collection>
    </resultMap>
</mapper>
