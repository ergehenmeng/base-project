<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.eghm.mapper.ItemStoreMapper">

    <select id="getByPage" resultType="com.eghm.vo.business.item.store.ItemStoreResponse" parameterType="com.eghm.dto.business.item.store.ItemStoreQueryRequest">
        select
        t.id,
        t.title,
        r.merchant_name,
        t.state,
        t.logo_url,
        t.telephone,
        t.open_time,
        t.recommend,
        t.detail_address,
        t.score,
        t.create_time,
        t.update_time
        from item_store t left join merchant r on t.merchant_id = r.id
        where t.deleted = false
        <if test="param.queryName != null and param.queryName != ''">
            and (
            t.title like concat('%', #{param.queryName, typeHandler=com.eghm.handler.mysql.LikeTypeHandler}, '%') or
            r.merchant_name like concat('%', #{param.queryName, typeHandler=com.eghm.handler.mysql.LikeTypeHandler}, '%') or
            )
        </if>
        <if test="param.merchantId != null">
            and t.merchant_id = #{param.merchantId}
        </if>
        <if test="param.state != null">
            and t.state = #{param.state}
        </if>
        order by t.id desc
    </select>

    <select id="getRecommend" resultType="com.eghm.vo.business.item.store.ItemStoreVO">
        select
        id,
        title,
        logo_url,
        cover_url,
        telephone,
        introduce
        from item_store where state = 1 and deleted = false order by recommend desc limit #{limit}
    </select>

    <update id="updateScore">
        update item_store set score = #{score} where id = #{id}
    </update>

    <select id="getList" resultType="com.eghm.vo.business.item.store.ItemStoreVO">
        select
            id,
            title,
            state,
            logo_url,
            cover_url,
            telephone,
            introduce
        from item_store where id in
        <foreach collection="storeIds" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>
    </select>

    <select id="getStorePage" parameterType="com.eghm.dto.business.base.BaseStoreQueryRequest" resultType="com.eghm.vo.business.base.BaseStoreResponse">
        select
        t.id as storeId,
        t.title as storeName,
        t.state,
        t.cover_url as coverUrl,
        'item' as productType,
        r.merchant_name
        from item_store t left join merchant r on t.merchant_id = r.id where t.deleted = false
        <if test="param.state != null">
            and t.state = #{param.state}
        </if>
        <if test="param.merchantId != null">
            and t.merchant_id = #{param.merchantId}
        </if>
        <if test="param.queryName != null and param.queryName != ''">
            and ( t.title like concat('%', #{param.queryName, typeHandler=com.eghm.handler.mysql.LikeTypeHandler}, '%') or
            r.merchant_name like concat('%', #{param.queryName, typeHandler=com.eghm.handler.mysql.LikeTypeHandler}, '%') )
        </if>
        order by t.id desc
    </select>

    <select id="getBaseList" resultType="com.eghm.vo.business.item.store.BaseItemStoreResponse">
        select
            t.id as storeId,
            t.title as storeName,
            t.state
        from item_store t where t.deleted = false
        <if test="merchantId != null">
            and t.merchant_id = #{merchantId}
        </if>
        order by t.id desc
    </select>

    <select id="getStoreList" resultType="com.eghm.vo.business.base.BaseStoreResponse">
        select
        t.id as storeId,
        t.title as storeName,
        t.state,
        t.cover_url as coverUrl,
        'item' as productType,
        r.merchant_name
        from item_store t left join merchant r on t.merchant_id = r.id
        where t.deleted = false and t.id in
        <foreach collection="storeIds" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

</mapper>
