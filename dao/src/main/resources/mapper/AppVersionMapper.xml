<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.eghm.dao.mapper.AppVersionMapper">
    <resultMap id="BaseResultMap" type="com.eghm.dao.model.AppVersion">
        <!--
          @create by mybatis
        -->
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="classify" jdbcType="VARCHAR" property="classify"/>
        <result column="version" jdbcType="VARCHAR" property="version"/>
        <result column="force_update" jdbcType="BIT" property="forceUpdate"/>
        <result column="url" jdbcType="VARCHAR" property="url"/>
        <result column="version_no" jdbcType="INTEGER" property="versionNo"/>
        <result column="add_time" jdbcType="TIMESTAMP" property="addTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="state" jdbcType="TINYINT" property="state"/>
        <result column="remark" jdbcType="VARCHAR" property="remark"/>
        <result column="deleted" jdbcType="BIT" property="deleted"/>
    </resultMap>
    <sql id="BaseColumnList">
        <!--
          @create by mybatis
        -->
        id, classify, version,version_no, force_update, url, add_time, remark, deleted,update_time,state
    </sql>

    <select id="getList" parameterType="com.eghm.model.dto.version.VersionQueryRequest" resultMap="BaseResultMap">
        select
        <include refid="BaseColumnList"/>
        from app_version
        <where>
            <if test="queryName != null and queryName != ''">
                and version like concat('%',#{queryName},'%')
            </if>
            <if test="state != null">
                and state = #{state}
            </if>
            <if test="classify != null and classify != ''">
                and classify = #{classify}
            </if>
        </where>
    </select>

    <select id="getLatestVersion" resultMap="BaseResultMap">
        select
        <include refid="BaseColumnList"/>
        from app_version where classify = #{classify} and deleted = false and state = 1 order by version_no desc limit 1
    </select>

    <select id="getVersion" resultMap="BaseResultMap">
        select
        <include refid="BaseColumnList"/>
        from app_version where classify = #{classify} and deleted = false and state = 1 and version = #{version} limit 1
    </select>

    <select id="getForceUpdateVersion" resultMap="BaseResultMap">
        select
        <include refid="BaseColumnList"/>
        from app_version
        where
        classify = #{classify}
        and deleted = false
        and state = 1
        and force_update = true
        and version_no &gt; #{startVersion}
        and version_no &lt; #{endVersion}
    </select>
</mapper>